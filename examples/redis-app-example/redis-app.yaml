# # Kubernetes manifests for the 3-component app
---
apiVersion: v1
kind: Namespace
metadata:
  name: redis-app
  labels:
    app: redis-app
    skycluster.io/managed-by: skycluster
---
# Redis deployment (single replica for simplicity)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: redis-app
  labels:
    skycluster.io/app-scope: distributed
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6-alpine
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: redis-app
  labels:
    skycluster.io/managed-by: skycluster
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
---
# Gateway deployment + service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: redis-app
  labels:
    skycluster.io/app-scope: distributed
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
      annotations:
        # Prometheus scrape annotations (many Prometheus setups honor these on pods)
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: gateway
          image: etesami/redis-gateway:latest  # replace placeholder
          imagePullPolicy: Always
          env:
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - containerPort: 8000
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  namespace: redis-app
  labels:
    app: gateway
    skycluster.io/managed-by: skycluster
  annotations:
    # If Prometheus scrapes services instead of pods, these help
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8000
  selector:
    app: gateway
---
# Backend deployment + service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: redis-app
  labels:
    skycluster.io/app-scope: distributed 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: backend
          image: etesami/redis-backend:latest  # replace placeholder
          imagePullPolicy: Always
          env:
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - containerPort: 8000
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "300m"
              memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: redis-app
  labels:
    app: backend
    skycluster.io/managed-by: skycluster
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8000
  selector:
    app: backend
---
# Worker deployment + service (workers also expose metrics)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: redis-app
  labels:
    skycluster.io/app-scope: distributed
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/"
    spec:
      containers:
        - name: worker
          image: etesami/redis-worker:latest  # replace placeholder
          imagePullPolicy: Always
          env:
            - name: REDIS_HOST
              value: "redis"
            - name: REDIS_PORT
              value: "6379"
            - name: METRICS_PORT
              value: "8000"
          ports:
            - containerPort: 8000
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "2000m"
              memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: worker
  namespace: redis-app
  labels:
    app: worker
    skycluster.io/managed-by: skycluster
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8000
      targetPort: 8000
  selector:
    app: worker
---
# # Example HorizontalPodAutoscaler for gateway (scale between 1 and 5 based on CPU)
# # Note: ensure Metrics Server is installed in your cluster for CPU-based HPA to work.
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: worker-hpa
  namespace: redis-app
  labels:
    skycluster.io/managed-by: skycluster
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: worker
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 120  # 2 minutes instead of 5
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
---
# yaml
# apiVersion: autoscaling/v2
# kind: HorizontalPodAutoscaler
# metadata:
#   name: worker-hpa
#   namespace: perf-app
# spec:
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: worker
#   minReplicas: 1
#   maxReplicas: 20
#   metrics:
#     - type: External
#       external:
#         metric:
#           name: perfapp_queue_length
#         target:
#           type: Value
#           value: "10"   # scale until the queue length <= 10 (adjust to your needs)